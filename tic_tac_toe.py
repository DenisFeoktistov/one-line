(lambda print_table_lambda, check_lambda, check_inp_lambda, take_input_lambda: (lambda state: (lambda table: ([(print_table_lambda(table), state.append(not state[1]), state.pop(1), (lambda t: ([[print("All the sh*t, Misha, let's do it again"), t.pop(), t.append(take_input_lambda(["x", "o"][not state[1]]))] for _ in iter(lambda: check_inp_lambda(t[0], table), True)], list(map(lambda x: [t.append(x)], list(map(int, t[0].split())))), t.pop(0), table[t[0] - 1].pop(t[1] - 1), table[t[0] - 1].insert(t[1] - 1, ["o", "x"][state[1]])))([take_input_lambda(["o", "x"][state[1]])])) for _ in iter(lambda: check_lambda(table) or all(map(lambda row: all(map(lambda s: s != "·", row)), table)), True)], (lambda: (print_table_lambda(table), print(f"Player {['o', 'x'][state[1]]} wins!")) if check_lambda(table) else print("Draw!"))()))(state[0]))([[["·", "·", "·"] for _ in range(3)], False]))(lambda table: print("  " + " ".join(map(str, range(1, 4))), "\n".join(map(lambda p: (lambda i, row: f"{i + 1} " + " ".join(row))(p[0], p[1]), enumerate(table))), sep="\n"), lambda table: any(map(lambda s: any(map(lambda pos: table[pos[0][0]][pos[0][1]] == table[pos[1][0]][pos[1][1]] == table[pos[2][0]][pos[2][1]] == s, ([(0, 0), (0, 1), (0, 2)], [(1, 0), (1, 1), (1, 2)], [(2, 0), (2, 1), (2, 2)], [(0, 0), (1, 1), (2, 2)],[(0, 0), (1, 0), (2, 0)], [(0, 1), (1, 1), (2, 1)], [(0, 2), (1, 2), (2, 2)], [(0, 2), (1, 1), (2, 0)]))), ["x", "o"])), lambda inp, table: len(inp.split()) == 2 and len(list(filter(lambda x: x.isdigit() and 1 <= int(x) <= 3, inp.split()))) == 2 and (lambda x, y: table[x - 1][y - 1] == "·")(*map(int, inp.split())), lambda s: input(f"Player {s} enter your move: "))
